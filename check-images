#!/bin/bash

set -eu

tarballdir="$(cd "$1" && pwd)"
shift

amd64_tarball="$tarballdir/amd64.tar.gz"
i386_tarball="$tarballdir/i386.tar.gz"
arm64_tarball="$tarballdir/arm64.tar.gz"
armhf_tarball="$tarballdir/armhf.tar.gz"
ppc64el_tarball="$tarballdir/ppc64el.tar.gz"

tryit() {
	local image="$1"
	local yaml="$2"
	local tarball="$3"

	echo "Testing $yaml"
	./vmdb2 --rootfs-tarball "$tarball" \
		--verbose \
		--log "$tarballdir/check.log" \
		--output "$image" \
		"$yaml"
	rm -f "$image"
	echo
}

src="$(dirname "$0")"
cd "$src"

# This uses debootstrap, not qemu-debootstrap. Hence, it only works on amd64
if [ -x /usr/bin/dpkg ] && [ "$(dpkg --print-architecture)" = "amd64" ]; then
	bash -x ./smoke.sh "$amd64_tarball"

	for x in "$@" pc uefi ansible smoke-pc smoke-uefi; do
		tryit "$tarballdir/$x.img" "$x.vmdb" "$amd64_tarball"
	done
fi

if [ -e /usr/share/OVMF/OVMF_VARS_4M.fd ]; then
	bash -x ./smoke-amd64.sh "$amd64_tarball"
fi
tryit "$tarballdir/amd64.img" "amd64.vmdb" "$amd64_tarball"

if [ -e /usr/share/OVMF/OVMF_VARS_4M.fd ]; then
	tryit "$tarballdir/amd64-uefi.img" "amd64-uefi.vmdb" "$amd64_tarball"
fi

if [ -e /usr/share/OVMF/OVMF32_VARS_4M.fd ]; then
	bash -x ./smoke-i386.sh "$i386_tarball"
fi
tryit "$tarballdir/i386.img" "i386.vmdb" "$i386_tarball"

if [ -e /usr/share/OVMF/OVMF32_VARS_4M.fd ]; then
	tryit "$tarballdir/i386-uefi.img" "i386-uefi.vmdb" "$i386_tarball"
fi

# On amd64, qemu-user-static has occasionally been observed to segfault. This
# is being investigated further.
# [  865.372027] show_signal_msg: 21 callbacks suppressed
# [  865.372029] locale[37762]: segfault at 1eed310 ip 0000000000562f20 sp 00007ffe90ac9bf8 error 4 in qemu-aarch64-static[401000+3e3000]
# [  865.372034] Code: 00 e9 94 7d 1c 00 0f 1f 40 00 64 83 2c 25 50 ff ff ff 01 74 05 c3 0f 1f 40 00 48 8d 3d c9 d9 7f 00 e9 e4 8a 1c 00 0f 1f 40 00 <64> 8b 04 25 50 ff ff ff 85 c0 0f 9f c0 c3 66 90 48 83 ec 08 64 8b
# dislabled because it breaks for me ./smoke-arm64.sh "$arm64_tarball"

# for x in "$@" arm64-uefi
# do
#     tryit "$tarballdir/$x.img" "$x.vmdb" "$arm64_tarball"
# done

# ./smoke-armhf.sh "$armhf_tarball"

# for x in "$@" armhf-uefi
# do
#     tryit "$tarballdir/$x.img" "$x.vmdb" "$armhf_tarball"
# done

# ./smoke-ppc64el.sh "$ppc64el_tarball"

# for x in "$@" ppc64el
# do
#     tryit "$tarballdir/$x.img" "$x.vmdb" "$ppc64el_tarball"
# done

echo All test images built successfully.
